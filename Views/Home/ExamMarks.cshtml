@{
    ViewData["Title"] = "Exam maks";
    Layout = "~/Views/Shared/_TeacherLayout.cshtml";
}
@model SchoolSystemTask.ViewModels.ExamMarksViewModel;

<div class="container-fluid py-4">
    <h3 class="mb-4">Insert Grades</h3>
    <div class="row mb-4">
        <div class="col-lg-8 col-md-6 mb-md-0 mb-4">
            <div class="card">
                <div class="card-header pb-0">
                    <div class="row">
                        <div class="col-lg-6 col-7">
                            <h6>
                                @Model.Class.ClassName @Model.Exam.ClassSubject.TeacherSubject.Subject.Name
                                @Model.Exam.ExamType Exam
                            </h6>
                            <p class="text-sm mb-0"></p>
                        </div>
                        <div class="col-lg-6 col-5 my-auto text-end"></div>
                    </div>
                </div>

                <!-- Table Section -->
                <form method="post" onsubmit="submitExamMarks(event)">
                    <div class="card-body px-0 pb-2">
                        <div class="table-responsive">
                            <table class="table align-items-center mb-0">
                                <thead>
                                    <tr>
                                        <th
                                            class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 col-10">
                                            Name
                                        </th>
                                        <th
                                            class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 col-2">
                                            Grade
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model.ExamWithMarks.Any())
                                    {
                                        @foreach (var student in Model.Students)
                                        {
                                            <tr>
                                                <td>
                                                    <div class="d-flex px-2 py-1">
                                                        <div>
                                                            <img src="/assets/new/profile-user.svg"
                                                                class="avatar avatar-sm me-3"
                                                                alt="@student.FirstName @student.LastName" />
                                                        </div>
                                                        <div class="d-flex flex-column justify-content-center">
                                                            <h6 class="mb-0 text-sm">@student.FirstName @student.LastName</h6>
                                                        </div>
                                                    </div>
                                                </td>

                                                <td class="align-middle">
                                                    <div class="input-group input-group-dynamic mb-4">
                                                        <input type="number" min="0" max="@Model.Exam.MaxMark"
                                                            class="form-control" placeholder="Grade" aria-label="Grade"
                                                            onchange="addStudentMark(event)"
                                                            id="@student.ExamMarks.First(e => e.ExamId == Model.Exam.Id).Id"
                                                            aria-describedby="basic-addon2"
                                                            value="@student.ExamMarks.First(e => e.ExamId == Model.Exam.Id).Mark" />
                                                        <span class="input-group-text" id="basic-addon2">
                                                            /@Model.Exam.MaxMark
                                                        </span>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="2">There are no registered students in this class</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <div class="ms-4 mt-4">
                                <button class="btn btn-primary">Save</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <partial name="_LatestUpdates" />
    </div>
</div>

@section Modals {
}

@section Scripts {
    <script>
        debugger;
        // Serialize the model data into a JavaScript object
        let examMarks = @Html.Raw(Json.Serialize(Model.ExamWithMarks));
        examMarks = examMarks.map(e => ({ id: +e.id, mark: +e.mark }));
        console.log(examMarks);

        // Function to update the mark of a specific student
        function addStudentMark(event) {
            examMarks = examMarks.map(e => +event.target.id === e.id ? { id: e.id, mark: +event.target.value } : e);
        }

        // Make the function async to use await
        async function submitExamMarks(event) {
            event.preventDefault();
            try {
                // Make the fetch request using await
                const response = await fetch('/api/ExamApi', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(examMarks)
                });

                // Check if the response is OK
                if (!response.ok) {
                    throw new Error('Something went wrong');
                }

                // Show a success message using Izitoast
                iziToast.success({
                    title: 'Success',
                    message: 'Exam marks have been saved successfully!',
                    position: 'topRight'
                });
            } catch (error) {
                console.error('Error adding exam marks:', error);

                // Show an error message using Izitoast
                iziToast.error({
                    title: 'Error',
                    message: 'Failed to save exam marks. Please try again.',
                    position: 'topRight'
                });
            }
        }
    </script>
}