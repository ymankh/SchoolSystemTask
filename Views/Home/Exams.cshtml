@using SchoolSystemTask.ViewModels
@model ExamViewModel;
@{
    ViewData["Title"] = "Exams";
    Layout = "~/Views/Shared/_TeacherLayout.cshtml";
}


<div class="container-fluid py-4">
    <h3 class="mb-4">Manage Exams</h3>
    <div>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#examModal" id="add-exam-button">
            <i class="fa fa-plus me-1" aria-hidden="true"></i>Add Exam
        </button>
    </div>
    <div class="my-4"></div>
    <div class="row mb-4">
        <div class="col-lg-8 col-md-6 mb-md-0 mb-4">
            <div class="card">
                <div class="card-header pb-0">
                    <div class="row">
                        <div class="col-lg-6 col-7">
                            <h6>Exams</h6>
                        </div>
                        <div class="col-lg-6 col-5 my-auto text-end"></div>
                    </div>
                </div>
                <div class="card-body px-0 pb-2">
                    <div class="table-responsive dashboard-table">
                        <table class="table align-items-center mb-0">
                            <thead>
                            <tr>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">
                                    Type
                                </th>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">
                                    Class
                                </th>
                                <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">
                                    date
                                </th>
                                <th class="text-uppercase text-secondary text-center text-xxs font-weight-bolder opacity-7 ps-2"
                                    data-bs-toggle="tooltip" data-bs-placement="top"
                                    title="Exam out of how many marks?" data-container="body" data-animation="true">
                                    mark
                                </th>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2"
                                    data-bs-toggle="tooltip" data-bs-placement="top"
                                    title="Will the exam appear on the students' calendar?" data-container="body"
                                    data-animation="true">
                                    visibility
                                </th>
                                <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7"
                                    data-bs-toggle="tooltip" data-bs-placement="top"
                                    title="Can students see there marks?" data-container="body"
                                    data-animation="true">
                                    published
                                </th>
                                <th></th>
                            </tr>
                            </thead>
                            <tbody>
                            @if (Model.Exams.Any())
                            {
                                @foreach (var exam in Model.Exams)
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex px-2 py-1">
                                                <div class="d-flex flex-column justify-content-center">
                                                    <h6 class="mb-0 text-sm">@exam.ExamType</h6>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="text-xs">@exam.ClassSubject.TeacherSubject.Subject.Name, @exam.ClassSubject.Class.ClassName</td>
                                        <td class="align-middle text-center text-sm">
                                            <span class="text-xs"> @exam.ExamStartDate </span>
                                        </td>
                                        <td class="text-xs text-center">@exam.MaxMark</td>
                                        <td class="text-xs text-center">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" value id="fcustomCheck1"
                                                       @(exam.IsVisible ? "checked" : "") disabled/>
                                            </div>
                                        </td>
                                        <td class="text-xs text-center">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" value @(exam.MarkPublished ? "checked" : "")
                                                       id="fcustomCheck1" disabled/>
                                            </div>
                                        </td>

                                        <td class="align-middle">
                                            <span class="d-inline-block" data-bs-toggle="tooltip" data-bs-placement="top"
                                                  title="Edit" data-container="body" data-animation="true">
                                                <a href="javascript:" class="btn btn-link p-1" data-bs-toggle="modal"
                                                   data-bs-target="#examModal" onclick="addDeleteButton()">
                                                    <i class="fa-solid fa-pen-to-square"></i>
                                                </a>
                                            </span>
                                            <span class="d-inline-block" data-bs-toggle="tooltip" data-bs-placement="top"
                                                  title="Add marks" data-container="body" data-animation="true">
                                                <a href='@Url.Action("ExamMarks", "Home", new { id = exam.Id })' class="btn btn-link p-1">
                                                    <i class="fa-solid fa-clipboard-check"></i>
                                                </a>
                                            </span>
                                            <span class="d-inline-block" data-bs-toggle="tooltip" data-bs-placement="top"
                                                  title="Delete Exam" data-container="body" data-animation="true">
                                                <a href='javascript:FireDeleteExam(@exam.Id);' class="btn btn-link p-1">
                                                    <i class="fa-solid fa-trash-can"></i>
                                                </a>
                                            </span>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="7">
                                        <h6>There are no Exams yet</h6>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <partial name="_LatestUpdates"/>
    </div>
    <footer class="footer py-4">
        <div class="container-fluid">
            <div class="row align-items-center justify-content-lg-between">
                <div class="col-lg-4 mb-lg-0 mb-4">
                    <div class="copyright text-center text-sm text-muted text-lg-start">
                        ©
                        <script>
							document.write(new Date().getFullYear().toString());
						</script>
                        , TaleamPro
                    </div>
                </div>
            </div>
        </div>
    </footer>
</div>

@section Modals
{
    <!-- Add Exam Modal -->
    <div class="modal fade" id="examModal" tabindex="-1" aria-labelledby="examModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="examModalLabel">Add/Edit Exam</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="examForm" method="post">
                        <!-- Exam Type -->
                        <div class="mb-3">
                            <label for="examType" class="form-label">Exam Type</label>
                            <select class="form-select" id="examType" name="ExamType" required>
                                <option value="" disabled selected>Select Exam Type</option>
                                <option value="first">First</option>
                                <option value="second">Second</option>
                                <option value="third">Third</option>
                                <option value="midterm">Midterm</option>
                                <option value="final">Final</option>
                                <option value="quiz">Quiz</option>
                                <option value="project">Project</option>
                            </select>
                        </div>

                        <!-- Class -->
                        <div class="mb-3">
                            <label for="examClass" class="form-label">Class</label>
                            <select class="form-select" onchange="handleSelection()" id="examClass" name="ClassId" required>
                                <option disabled selected>Choose a class</option>
                                @if (Model.Classes.Classes.Any())
                                {
                                    @foreach (var _class in Model.Classes.Classes)
                                    {
                                        <option value="@_class.Id">@_class.ClassName</option>
                                    }
                                }
                            </select>
                        </div>
                        <!-- Select subject after selecting a class -->
                        <div class="mb-3">
                            <label for="ClassSubjectId" class="form-label">Subject</label>
                            <select class="form-select" disabled id="ClassSubjectId" name="ClassSubjectId" required>
                            </select>
                        </div>

                        <!-- Exam Date -->
                        <div class="mb-3 row">
                            <div class="col-md-6">
                                <label for="examDate" class="form-label">Exam Date</label>
                                <input type="date" class="form-control" id="examDate" name="ExamStartDate" required/>
                            </div>
                            <div class="col-md-6">
                                <label for="examDuration" class="form-label">Exam Duration</label>

                                <input class="form-control" id="examDuration" name="examDuration" required type="text"
                                       pattern="[0-9]{2}:[0-9]{2}" value="01:00" title="Write a duration in the format hh:mm">

                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="ExamDetails">Exam Details</label>
                            <textarea name="Details" id="ExamDetails" class="form-control"></textarea>
                        </div>

                        <!-- Maximum Mark -->
                        <div class="mb-3">
                            <label for="examMark" class="form-label">Mark</label>
                            <input type="number" class="form-control" id="examMark" name="MaxMark"
                                   placeholder="Enter Maximum Mark" required/>
                        </div>

                        <!-- Visibility -->
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="IsVisible" id="customCheck2" checked/>
                                <label class="custom-control-label" for="customCheck2">Visibility</label>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="submit" form="examForm" class="btn btn-primary">
                        Save Exam
                    </button>
                    <button id="delete-exam-button" type="submit" form="examForm" class="btn btn-danger d-none">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts
{
    <script>
		const deleteExamButton = document.getElementById("delete-exam-button");
		const addExamButton = document.getElementById("add-exam-button");
		const examModalLabel = document.getElementById("examModalLabel");
		addExamButton.addEventListener("click", () => {
		deleteExamButton.classList.add("d-none");
		examModalLabel.textContent = "Add Exam";
		});
		function addDeleteButton() {
		deleteExamButton.classList.remove("d-none");
		examModalLabel.textContent = "Edit Exam";
		}
		function handleSelection() {
		let select = document.getElementById("examClass");
		getSubjects(select.value);
		}
		async function getSubjects(id) {
		document.getElementById("ClassSubjectId").innerHTML = "";
		let response = await fetch(`/api/ClassesApi/${id}`);
		let data = await response.json();
		let classSelect = document.getElementById("ClassSubjectId");
		for (let classSubject of data) {
			let option = document.createElement("option");
			option.value = classSubject.id;
			option.innerText = classSubject.teacherSubject.subject.name;
			classSelect.appendChild(option);
		}
		classSelect.disabled = false;
		}
		function FireDeleteExam(id) {
		    Swal.fire({
			    title: "Are you sure?",
			    text: "You won't be able to revert this!",
			    icon: "warning",
			    showCancelButton: true,
			    confirmButtonColor: "#3085d6",
			    cancelButtonColor: "#d33",
			    confirmButtonText: "Yes, delete it!",
		    }).then((result) => {
			    if (result.isConfirmed) {
				    deleteExam(id)
			    }
		    });
		}
		async function deleteExam(id) {
			const response = await fetch(`/api/ExamApi/${id}`, {
				method: 'DELETE',
				headers: {
					'Content-Type': 'application/json'
				}
			});
			if (response.ok) {
		    window.location.reload() 
				// Handle success, such as updating the UI
			} else {
				// Handle other errors
			console.error("Network error:", error);
			Swal.fire({
				icon: "error",
				title: "Oops...",
				text: "Something went wrong!",
				footer: 'The Exam handleSelection not been deleted!'
			    });
		    }
	    }
	</script>
}